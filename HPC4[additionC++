// vector_addition_performance.cu
#include <iostream>
#include <cuda.h>
#include <chrono> // For CPU timing
using namespace std;
using namespace chrono;

__global__ void vectorAddGPU(int *A, int *B, int *C, int n) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
        C[idx] = A[idx] + B[idx];
    }
}

void vectorAddCPU(int *A, int *B, int *C, int n) {
    for (int i = 0; i < n; i++) {
        C[i] = A[i] + B[i];
    }
}

int main() {
    int n;
    cout << "Enter the size of vectors: ";
    cin >> n;

    int *h_A = new int[n];
    int *h_B = new int[n];
    int *h_C_CPU = new int[n];
    int *h_C_GPU = new int[n];

    cout << "Enter elements of Vector A: ";
    for (int i = 0; i < n; i++)
        cin >> h_A[i];

    cout << "Enter elements of Vector B: ";
    for (int i = 0; i < n; i++)
        cin >> h_B[i];

    // CPU Sequential Execution
    auto startCPU = high_resolution_clock::now();
    vectorAddCPU(h_A, h_B, h_C_CPU, n);
    auto endCPU = high_resolution_clock::now();
    auto durationCPU = duration_cast<microseconds>(endCPU - startCPU);
    
    // GPU Parallel Execution
    int *d_A, *d_B, *d_C;
    cudaMalloc((void**)&d_A, n * sizeof(int));
    cudaMalloc((void**)&d_B, n * sizeof(int));
    cudaMalloc((void**)&d_C, n * sizeof(int));

    cudaMemcpy(d_A, h_A, n * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, n * sizeof(int), cudaMemcpyHostToDevice);

    cudaEvent_t startGPU, stopGPU;
    cudaEventCreate(&startGPU);
    cudaEventCreate(&stopGPU);
    cudaEventRecord(startGPU);

    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;
    vectorAddGPU<<<gridSize, blockSize>>>(d_A, d_B, d_C, n);

    cudaEventRecord(stopGPU);
    cudaEventSynchronize(stopGPU);

    cudaMemcpy(h_C_GPU, d_C, n * sizeof(int), cudaMemcpyDeviceToHost);

    float milliseconds = 0;
    cudaEventElapsedTime(&milliseconds, startGPU, stopGPU);

    // Output a few elements
    cout << "\nSample Output (First 10 elements):" << endl;
    for (int i = 0; i < min(10, n); i++)
        cout << h_C_GPU[i] << " ";
    cout << endl;

    cout << "\nTime Taken by CPU (sequential): " << durationCPU.count() << " microseconds" << endl;
    cout << "Time Taken by GPU (parallel): " << milliseconds * 1000 << " microseconds" << endl;

    // Cleanup
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);
    delete[] h_A;
    delete[] h_B;
    delete[] h_C_CPU;
    delete[] h_C_GPU;

    return 0;
}
/*
cd ~/Desktop
nvcc -o vector_add vector_add.cu 
./vector_add


Enter the size of vectors: 5
Enter elements of Vector A: 1 2 3 4 5
Enter elements of Vector B: 10 20 30 40 50

First 10 elements of result vector:
3 3 3 3 3 3 3 3 3 3
...
CPU Time = 150 ms
GPU Time = 20 ms

*/
