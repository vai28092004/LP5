#include <iostream>    // For input/output
#include <vector>      // For dynamic arrays (adjacency list)
#include <queue>       // For BFS (Breadth-First Search)
#include <stack>       // For DFS (Depth-First Search)
#include <omp.h>       // For OpenMP parallel programming

using namespace std;

// Graph class representing an undirected graph
class Graph {
private:
    int numVertices;                 // Number of vertices
    vector<vector<int>> adj;          // Adjacency list

public:
    // Constructor to initialize graph
    Graph(int vertices) : numVertices(vertices), adj(vertices) {}

    // Add an undirected edge
    void addEdge(int src, int dest) {
        adj[src].push_back(dest);
        adj[dest].push_back(src);
    }

    // Display the graph
    void viewGraph() {
        cout << "\nGraph adjacency list:\n";
        for (int i = 0; i < numVertices; i++) {
            cout << "Vertex " << i << " -> ";
            for (int neighbor : adj[i]) {
                cout << neighbor << " ";
            }
            cout << endl;
        }
    }

    // Parallel BFS using OpenMP with critical sections
    void bfs(int startVertex) {
        vector<bool> visited(numVertices, false);
        queue<int> q;

        visited[startVertex] = true;
        q.push(startVertex);

        cout << "\nBreadth First Search (BFS): ";

        while (!q.empty()) {
            int currentVertex;

            #pragma omp critical
            {
                if (!q.empty()) {
                    currentVertex = q.front();
                    q.pop();
                }
            }

            cout << currentVertex << " ";

            #pragma omp parallel for
            for (int i = 0; i < adj[currentVertex].size(); i++) {
                int neighbor = adj[currentVertex][i];

                #pragma omp critical
                {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        q.push(neighbor);
                    }
                }
            }
        }

        cout << endl;
    }

    // Parallel DFS using OpenMP with critical sections
    void dfs(int startVertex) {
        vector<bool> visited(numVertices, false);
        stack<int> s;

        visited[startVertex] = true;
        s.push(startVertex);

        cout << "\nDepth First Search (DFS): ";

        while (!s.empty()) {
            int currentVertex;

            #pragma omp critical
            {
                if (!s.empty()) {
                    currentVertex = s.top();
                    s.pop();
                }
            }

            cout << currentVertex << " ";

            #pragma omp parallel for
            for (int i = 0; i < adj[currentVertex].size(); i++) {
                int neighbor = adj[currentVertex][i];

                #pragma omp critical
                {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        s.push(neighbor);
                    }
                }
            }
        }

        cout << endl;
    }
};

int main() {
    int numVertices;

    cout << "Enter the number of vertices in the graph: ";
    cin >> numVertices;

    // Create the graph
    Graph graph(numVertices);

    int numEdges;
    cout << "Enter the number of edges in the graph: ";
    cin >> numEdges;

    cout << "Enter the edges (source destination):\n";
    for (int i = 0; i < numEdges; i++) {
        int src, dest;
        cin >> src >> dest;
        graph.addEdge(src, dest);
    }

    // Display the graph
    graph.viewGraph();

    int startVertex;
    cout << "\nEnter the starting vertex for BFS and DFS: ";
    cin >> startVertex;

    // Perform BFS and DFS
    graph.bfs(startVertex);
    graph.dfs(startVertex);

    return 0;
}
/* 
> g++ -fopenmp B400310439.cpp -o B400310439
> ./B400310439

vertices: 5
edges: 6 

edges (source destination):
0 1 
0 2 
1 3 
1 4 
2 4 
3 4 

Graph: 
automatic by compiler 

starting Vertex: 0 
BFS - 0 2 1 4 3 
DFS - 0 1 4 3 2 

*/
