// matrix_multiplication_performance.cu
#include <iostream>
#include <cuda.h>
#include <chrono> // For CPU timing
using namespace std;
using namespace chrono;

__global__ void matrixMulGPU(int *A, int *B, int *C, int N) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < N && col < N) {
        int sum = 0;
        for (int k = 0; k < N; k++) {
            sum += A[row * N + k] * B[k * N + col];
        }
        C[row * N + col] = sum;
    }
}

void matrixMulCPU(int *A, int *B, int *C, int N) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            int sum = 0;
            for (int k = 0; k < N; k++) {
                sum += A[row * N + k] * B[k * N + col];
            }
            C[row * N + col] = sum;
        }
    }
}

int main() {
    int N;
    cout << "Enter size N for NxN matrices: ";
    cin >> N;

    int size = N * N * sizeof(int);
    int *h_A = new int[N * N];
    int *h_B = new int[N * N];
    int *h_C_CPU = new int[N * N];
    int *h_C_GPU = new int[N * N];

    cout << "Enter elements of Matrix A: ";
    for (int i = 0; i < N * N; i++)
        cin >> h_A[i];

    cout << "Enter elements of Matrix B: ";
    for (int i = 0; i < N * N; i++)
        cin >> h_B[i];

    // CPU Sequential Execution
    auto startCPU = high_resolution_clock::now();
    matrixMulCPU(h_A, h_B, h_C_CPU, N);
    auto endCPU = high_resolution_clock::now();
    auto durationCPU = duration_cast<microseconds>(endCPU - startCPU);

    // GPU Parallel Execution
    int *d_A, *d_B, *d_C;
    cudaMalloc((void**)&d_A, size);
    cudaMalloc((void**)&d_B, size);
    cudaMalloc((void**)&d_C, size);

    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);

    cudaEvent_t startGPU, stopGPU;
    cudaEventCreate(&startGPU);
    cudaEventCreate(&stopGPU);
    cudaEventRecord(startGPU);

    dim3 threadsPerBlock(16, 16);
    dim3 blocksPerGrid((N + 15) / 16, (N + 15) / 16);
    matrixMulGPU<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, N);

    cudaEventRecord(stopGPU);
    cudaEventSynchronize(stopGPU);

    cudaMemcpy(h_C_GPU, d_C, size, cudaMemcpyDeviceToHost);

    float milliseconds = 0;
    cudaEventElapsedTime(&milliseconds, startGPU, stopGPU);

    // Output a few elements
    cout << "\nSample Output (First 3x3 Block):" << endl;
    for (int i = 0; i < min(3, N); i++) {
        for (int j = 0; j < min(3, N); j++) {
            cout << h_C_GPU[i * N + j] << "\t";
        }
        cout << endl;
    }

    cout << "\nTime Taken by CPU (sequential): " << durationCPU.count() << " microseconds" << endl;
    cout << "Time Taken by GPU (parallel): " << milliseconds * 1000 << " microseconds" << endl;

    // Cleanup
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);
    delete[] h_A;
    delete[] h_B;
    delete[] h_C_CPU;
    delete[] h_C_GPU;

    return 0;
}
/*
cd ~/Desktop
nvcc -o matrix_mul matrix_mul.cu 
./matrix_mul

Enter size N for NxN matrices: 3
Enter elements of Matrix A: 1 2 3 4 5 6 7 8 9
Enter elements of Matrix B: 9 8 7 6 5 4 3 2 1

Enter size of matrices: 512

*/
