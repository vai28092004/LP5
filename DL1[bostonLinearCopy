!pip install tensorflow scikit-learn matplotlib --quiet
!pip --version
!python -m pip install --upgrade pip

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from keras import layers

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

data=pd.read_csv('boston_housing.csv')

data.head()

data.isnull().sum()

data.info() 

data.describe() 

x=data.drop(columns=['MEDV']) 

y=data['MEDV'].values

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42) 

scaler=StandardScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test) 

model=tf.keras.Sequential([
    tf.keras.layers.Input(shape=(13,),name='input-layer'),
    tf.keras.layers.Dense(128,activation='relu',name='hidden-layer-1'),
    tf.keras.layers.BatchNormalization(name='batch1'),
    tf.keras.layers.Dropout(0.2,name='drop-out-1'),
    tf.keras.layers.Dense(64,activation='relu',name='hidden-layer-2'),
    tf.keras.layers.BatchNormalization(name='batch2'),
    tf.keras.layers.Dropout(0.2,name='drop-out-2'),
    tf.keras.layers.Dense(1,name='output-layer')    
]) 

from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error
model.compile(optimizer='adam',loss='mean_squared_error') 

history=model.fit(x_train,y_train,epochs=100,batch_size=32,validation_data=(x_test,y_test),verbose=1) 

model.summary() 

y_pred=model.predict(x_test) 

mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
mae=mean_absolute_error(y_test,y_pred)
r2_score=r2_score(y_test,y_pred) 

print(f'mse:{mse:.2f}')
print(f'rmse:{rmse:.2f}')
print(f'r2:{r2_score:.2f}') 

new_data=np.array([
    [0.1,0.2,7.2,0.0,0.0,6.0,15.0,1.0,5.0,300.0,10.0,300.0,15.0],
    [0.1,0.2,7.2,0.0,0.0,6.0,15.0,1.0,5.0,300.0,10.0,300.0,15.0]
])

predictions=model.predict(new_data)
print("predicted housing prices:",predictions)
