#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

class Graph {
public:
    int V; // Number of vertices
    vector<vector<int>> adj; // Adjacency list

    Graph(int V) {
        this->V = V;
        adj.resize(V); // Resize adjacency list for the number of vertices
    }

    // Function to add an undirected edge
    void addEdge(int u, int v) {
        adj[u].push_back(v); // Add vertex v to u's adjacency list
        adj[v].push_back(u); // Add vertex u to v's adjacency list
    }

    // Sequential BFS
    void BFS_Sequential(int start) {
        vector<bool> visited(V, false); // To track visited nodes
        queue<int> q; // Queue for BFS traversal

        visited[start] = true; // Mark the start node as visited
        q.push(start); // Push the start node to the queue

        cout << "BFS Traversal (Sequential): ";

        while (!q.empty()) {
            int node = q.front(); // Get the front node of the queue
            q.pop(); // Remove the node from the queue

            cout << node << " "; // Print the node

            for (int i = 0; i < adj[node].size(); i++) { // Iterate through neighbors
                int neighbor = adj[node][i]; // Get neighbor
                if (!visited[neighbor]) { // If neighbor has not been visited
                    visited[neighbor] = true; // Mark neighbor as visited
                    q.push(neighbor); // Push the neighbor to the queue
                }
            }
        }
        cout << endl;
    }

    // Parallel BFS using OpenMP
    void BFS_Parallel(int start) {
        vector<bool> visited(V, false); // To track visited nodes
        queue<int> q; // Queue for BFS traversal

        visited[start] = true; // Mark the start node as visited
        q.push(start); // Push the start node to the queue

        cout << "BFS Traversal (Parallel): ";

        while (!q.empty()) {
            int node = q.front(); // Get the front node of the queue
            q.pop(); // Remove the node from the queue

            cout << node << " "; // Print the node

            // Parallelize the exploration of neighbors
            #pragma omp parallel for
            for (int i = 0; i < adj[node].size(); i++) { // Iterate through neighbors
                int neighbor = adj[node][i]; // Get neighbor
                if (!visited[neighbor]) { // If neighbor has not been visited
                    #pragma omp critical
                    {
                        if (!visited[neighbor]) { // Double-check inside critical section
                            visited[neighbor] = true; // Mark the neighbor as visited
                            q.push(neighbor); // Push the neighbor into the queue
                        }
                    }
                }
            }
        }
        cout << endl;
    }
};

int main() {
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V; // Input number of vertices

    Graph g(V); // Create a graph with V vertices

    cout << "Enter number of edges: ";
    cin >> E; // Input number of edges

    cout << "Enter the edges (u v format):" << endl;
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v; // Input an edge between u and v
        g.addEdge(u, v); // Add the edge to the graph
    }

    int start;
    cout << "Enter the starting node for BFS: ";
    cin >> start; // Input the starting node for BFS

    // Measure execution time for sequential BFS
    double start_time_seq = omp_get_wtime(); // Get the start time for sequential BFS
    g.BFS_Sequential(start); // Run BFS sequentially
    double end_time_seq = omp_get_wtime(); // Get the end time for sequential BFS
    cout << "Time taken for Sequential BFS: " << end_time_seq - start_time_seq << " seconds" << endl;

    // Measure execution time for parallel BFS
    double start_time_par = omp_get_wtime(); // Get the start time for parallel BFS
    g.BFS_Parallel(start); // Run BFS in parallel
    double end_time_par = omp_get_wtime(); // Get the end time for parallel BFS
    cout << "Time taken for Parallel BFS: " << end_time_par - start_time_par << " seconds" << endl;

    return 0;
}

/*
cd ~/Desktop            # Go to the folder

g++ -fopenmp -o parallel_bfs parallel_bfs.cpp 
./parallel_bfs

Enter number of vertices: 5
Enter number of edges: 4
Enter the edges (u v format):
0 1
1 2
2 3
3 4
Enter the starting node for BFS: 0

BFS Traversal (Sequential): 0 1 2 3 4 
Time taken for Sequential BFS: X seconds

BFS Traversal (Parallel): 0 1 2 3 4 
Time taken for Parallel BFS: Y seconds


*/
